@namespace Mapsui.UI.Blazor;
<div class="MapControl" onmouseup="OnMouseUp" onmousedown="OnMouseDown" onmousewheel="OnMouseWheel" onmousemove="OnMouseMove">
    <SKGLView name="_skglView" OnPaintSurface="OnPaintSurface" IgnorePixelScaling="true" EnableRenderLoop="true" />
</div>
@code 
{
    private RectangleF? _selectRectangle;
    private PointF? _downMousePosition;
    private string _defaultCursor = Cursors.Default;
    public string MoveCursor { get; set; } = Cursors.Move;
    public int MoveButton { get; set; } = MouseButtons.Primary;
    public int MoveModifier { get; set; } = Keys.None;
    public int ZoomButton { get; set; } = MouseButtons.Primary;
    public int ZoomModifier { get; set; } = Keys.Control;
    public MouseWheelAnimation MouseWheelAnimation { get; } = new();

    // Alternative: protected override void OnInitialized()    
    public MapControl()
    {
        CommonInitialize();
        ControlInitialize();
    }

    private void ControlInitialize()
    {
        _invalidate = () => RunOnUIThread(Invalidate);

        // Mapsui.Rendering.Skia use Mapsui.Nts where GetDbaseLanguageDriver need encoding providers
        System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

        Renderer = new MapRenderer();
        RefreshGraphics();

        Content = CreateBoundingBoxDrawable();
    }

    private Drawable CreateBoundingBoxDrawable()
    {
        var drawable = new Drawable { Visible = false };

        drawable.Paint += (o, e) =>
        {
            var fill = Color.FromArgb(100, Color.Yellow);

            using var border = Pens.Cached(Color.Black, 1.4f, DashStyles.Dash);

            e.Graphics.FillRectangle(fill, _selectRectangle);
            e.Graphics.DrawRectangle(border, _selectRectangle);
        };

        return drawable;
    }
    protected override void OnLoadComplete(EventArgs e)
    {
        base.OnLoadComplete(e);

        SetViewportSize();

        CanFocus = true;
    }
    protected void OnMouseWheel(MouseEventArgs e)
    {
        base.OnMouseWheel(e);

        if (_map?.ZoomLock ?? true) return;
        if (!Viewport.HasSize) return;

        var resolution = MouseWheelAnimation.GetResolution((int)e.Delta.Height, _viewport, _map);
        // Limit target resolution before animation to avoid an animation that is stuck on the max resolution, which would cause a needless delay
        resolution = _map.Limiter.LimitResolution(resolution, Viewport.Width, Viewport.Height, _map.Resolutions, _map.Extent);
        Navigator?.ZoomTo(resolution, e.Location.ToMapsui(), MouseWheelAnimation.Duration, MouseWheelAnimation.Easing);
    }
    protected override void OnSizeChanged(EventArgs e)
    {
        base.OnSizeChanged(e);

        SetViewportSize();
    }
    private void RunOnUIThread(Action action)
    {
        MediaTypeNames.Application.Instance.AsyncInvoke(action);
    }
    protected void OnMouseDown(MouseEventArgs e)
    {
        IsInBoxZoomMode = e.Buttons == ZoomButton && (ZoomModifier == Keys.None || e.Modifiers == ZoomModifier);

        bool move_mode = e.Buttons == MoveButton && (MoveModifier == Keys.None || e.Modifiers == MoveModifier);

        if (move_mode)
            _defaultCursor = Cursor;

        if (move_mode || IsInBoxZoomMode)
            _downMousePosition = e.Location;
    }
    private bool IsInBoxZoomMode
    {
        get => Content.Visible;
        set
        {
            _selectRectangle = RectangleF.Empty;
            Content.Visible = value;
        }
    }

    protected void OnMouseUp(MouseEventArgs e)
    {
        if (IsInBoxZoomMode)
        {
            var previous = Viewport.ScreenToWorld(_selectRectangle.TopLeft.X, _selectRectangle.TopLeft.Y);
            var current = Viewport.ScreenToWorld(_selectRectangle.BottomRight.X, _selectRectangle.BottomRight.Y);
            ZoomToBox(previous, current);
        }
        else if (_downMousePosition.HasValue)
        {
            if (IsClick(e.Location, _downMousePosition.Value))
                OnInfo(InvokeInfo(e.Location.ToMapsui(), _downMousePosition.Value.ToMapsui(), 1));
        }

        _downMousePosition = null;

        Cursor = _defaultCursor;

        RefreshData();
    }
    private static bool IsClick(PointF currentPosition, PointF previousPosition)
    {
        return Math.Abs(PointF.Distance(currentPosition, previousPosition)) < 5;
    }
   
    protected void OnMouseMove(MouseEventArgs e)
    {
        if (_downMousePosition.HasValue)
        {
            if (IsInBoxZoomMode)
            {
                _selectRectangle.TopLeft = PointF.Min(e.Location, _downMousePosition.Value);
                _selectRectangle.BottomRight = PointF.Max(e.Location, _downMousePosition.Value);
                Content.Invalidate();
            }
            else // drag/pan - mode
            {
                Cursor = MoveCursor;

                _viewport.Transform(e.Location.ToMapsui(), _downMousePosition.Value.ToMapsui());

                RefreshGraphics();

                _downMousePosition = e.Location;
            }
        }
    }
    public void ZoomToBox(MPoint beginPoint, MPoint endPoint)
    {
        var width = Math.Abs(endPoint.X - beginPoint.X);
        var height = Math.Abs(endPoint.Y - beginPoint.Y);
        if (width <= 0) return;
        if (height <= 0) return;

        ZoomHelper.ZoomToBoudingbox(beginPoint.X, beginPoint.Y, endPoint.X, endPoint.Y,
            Width, Height, out var x, out var y, out var resolution);

        Navigator?.NavigatBlazor(new MPoint(x, y), resolution, 384);

        RefreshData();
        RefreshGraphics();
        ClearBBoxDrawing();
    }
    private void ClearBBoxDrawing()
    {
        RunOnUIThread(() => IsInBoxZoomMode = false);
    }
    
    protected override void OnPaint(SKPaintEventArgs e)
    {
        if (PixelDensity <= 0)
            return;

        var canvas = e.Surface.Canvas;

        canvas.Scale(PixelDensity, PixelDensity);

        CommonDrawControl(canvas);
    }
    private float GetPixelDensity()
    {
        var center = PointToScreen(Location + Size / 2);

        return Screen.FromPoint(center).LogicalPixelSize;
    }   
}