### YamlMime:ManagedReference
items:
- uid: Mapsui.Extensions.Cache.SqlitePersistentCache
  commentId: T:Mapsui.Extensions.Cache.SqlitePersistentCache
  id: SqlitePersistentCache
  parent: Mapsui.Extensions.Cache
  children:
  - Mapsui.Extensions.Cache.SqlitePersistentCache.#ctor(System.String,System.Nullable{System.TimeSpan},System.String,System.Boolean)
  - Mapsui.Extensions.Cache.SqlitePersistentCache.Add(BruTile.TileIndex,System.Byte[])
  - Mapsui.Extensions.Cache.SqlitePersistentCache.Add(System.String,System.Byte[],System.Byte[])
  - Mapsui.Extensions.Cache.SqlitePersistentCache.Clear
  - Mapsui.Extensions.Cache.SqlitePersistentCache.Find(BruTile.TileIndex)
  - Mapsui.Extensions.Cache.SqlitePersistentCache.Find(System.String,System.Byte[])
  - Mapsui.Extensions.Cache.SqlitePersistentCache.Remove(BruTile.TileIndex)
  - Mapsui.Extensions.Cache.SqlitePersistentCache.Remove(System.String,System.Byte[])
  langs:
  - csharp
  - vb
  name: SqlitePersistentCache
  nameWithType: SqlitePersistentCache
  fullName: Mapsui.Extensions.Cache.SqlitePersistentCache
  type: Class
  source:
    remote:
      path: Mapsui.Extensions/Cache/SqlitePersistentCache.cs
      branch: main
      repo: git@github.com:Mapsui/Mapsui.git
    id: SqlitePersistentCache
    path: ../../Mapsui.Extensions/Cache/SqlitePersistentCache.cs
    startLine: 12
  assemblies:
  - Mapsui.Extensions
  namespace: Mapsui.Extensions.Cache
  syntax:
    content: 'public class SqlitePersistentCache : IPersistentCache<byte[]>, ITileCache<byte[]>, IUrlPersistentCache'
    content.vb: Public Class SqlitePersistentCache Implements IPersistentCache(Of Byte()), ITileCache(Of Byte()), IUrlPersistentCache
  inheritance:
  - System.Object
  implements:
  - BruTile.Cache.IPersistentCache{System.Byte[]}
  - BruTile.Cache.ITileCache{System.Byte[]}
  - Mapsui.Cache.IUrlPersistentCache
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Mapsui.Extensions.DisposableExtension.DisposeIfDisposable
- uid: Mapsui.Extensions.Cache.SqlitePersistentCache.#ctor(System.String,System.Nullable{System.TimeSpan},System.String,System.Boolean)
  commentId: M:Mapsui.Extensions.Cache.SqlitePersistentCache.#ctor(System.String,System.Nullable{System.TimeSpan},System.String,System.Boolean)
  id: '#ctor(System.String,System.Nullable{System.TimeSpan},System.String,System.Boolean)'
  parent: Mapsui.Extensions.Cache.SqlitePersistentCache
  langs:
  - csharp
  - vb
  name: SqlitePersistentCache(string, TimeSpan?, string?, bool)
  nameWithType: SqlitePersistentCache.SqlitePersistentCache(string, TimeSpan?, string?, bool)
  fullName: Mapsui.Extensions.Cache.SqlitePersistentCache.SqlitePersistentCache(string, System.TimeSpan?, string?, bool)
  type: Constructor
  source:
    remote:
      path: Mapsui.Extensions/Cache/SqlitePersistentCache.cs
      branch: main
      repo: git@github.com:Mapsui/Mapsui.git
    id: .ctor
    path: ../../Mapsui.Extensions/Cache/SqlitePersistentCache.cs
    startLine: 20
  assemblies:
  - Mapsui.Extensions
  namespace: Mapsui.Extensions.Cache
  syntax:
    content: public SqlitePersistentCache(string name, TimeSpan? cacheExpireTime = null, string? folder = null, bool compress = true)
    parameters:
    - id: name
      type: System.String
    - id: cacheExpireTime
      type: System.Nullable{System.TimeSpan}
    - id: folder
      type: System.String
    - id: compress
      type: System.Boolean
    content.vb: Public Sub New(name As String, cacheExpireTime As TimeSpan? = Nothing, folder As String = Nothing, compress As Boolean = True)
  overload: Mapsui.Extensions.Cache.SqlitePersistentCache.#ctor*
  nameWithType.vb: SqlitePersistentCache.New(String, TimeSpan?, String, Boolean)
  fullName.vb: Mapsui.Extensions.Cache.SqlitePersistentCache.New(String, System.TimeSpan?, String, Boolean)
  name.vb: New(String, TimeSpan?, String, Boolean)
- uid: Mapsui.Extensions.Cache.SqlitePersistentCache.Add(BruTile.TileIndex,System.Byte[])
  commentId: M:Mapsui.Extensions.Cache.SqlitePersistentCache.Add(BruTile.TileIndex,System.Byte[])
  id: Add(BruTile.TileIndex,System.Byte[])
  parent: Mapsui.Extensions.Cache.SqlitePersistentCache
  langs:
  - csharp
  - vb
  name: Add(TileIndex, byte[])
  nameWithType: SqlitePersistentCache.Add(TileIndex, byte[])
  fullName: Mapsui.Extensions.Cache.SqlitePersistentCache.Add(BruTile.TileIndex, byte[])
  type: Method
  source:
    remote:
      path: Mapsui.Extensions/Cache/SqlitePersistentCache.cs
      branch: main
      repo: git@github.com:Mapsui/Mapsui.git
    id: Add
    path: ../../Mapsui.Extensions/Cache/SqlitePersistentCache.cs
    startLine: 135
  assemblies:
  - Mapsui.Extensions
  namespace: Mapsui.Extensions.Cache
  example: []
  syntax:
    content: public void Add(TileIndex index, byte[] tile)
    parameters:
    - id: index
      type: BruTile.TileIndex
    - id: tile
      type: System.Byte[]
    content.vb: Public Sub Add(index As TileIndex, tile As Byte())
  overload: Mapsui.Extensions.Cache.SqlitePersistentCache.Add*
  implements:
  - BruTile.Cache.ITileCache{System.Byte[]}.Add(BruTile.TileIndex,System.Byte[])
  nameWithType.vb: SqlitePersistentCache.Add(TileIndex, Byte())
  fullName.vb: Mapsui.Extensions.Cache.SqlitePersistentCache.Add(BruTile.TileIndex, Byte())
  name.vb: Add(TileIndex, Byte())
- uid: Mapsui.Extensions.Cache.SqlitePersistentCache.Remove(BruTile.TileIndex)
  commentId: M:Mapsui.Extensions.Cache.SqlitePersistentCache.Remove(BruTile.TileIndex)
  id: Remove(BruTile.TileIndex)
  parent: Mapsui.Extensions.Cache.SqlitePersistentCache
  langs:
  - csharp
  - vb
  name: Remove(TileIndex)
  nameWithType: SqlitePersistentCache.Remove(TileIndex)
  fullName: Mapsui.Extensions.Cache.SqlitePersistentCache.Remove(BruTile.TileIndex)
  type: Method
  source:
    remote:
      path: Mapsui.Extensions/Cache/SqlitePersistentCache.cs
      branch: main
      repo: git@github.com:Mapsui/Mapsui.git
    id: Remove
    path: ../../Mapsui.Extensions/Cache/SqlitePersistentCache.cs
    startLine: 153
  assemblies:
  - Mapsui.Extensions
  namespace: Mapsui.Extensions.Cache
  example: []
  syntax:
    content: public void Remove(TileIndex index)
    parameters:
    - id: index
      type: BruTile.TileIndex
    content.vb: Public Sub Remove(index As TileIndex)
  overload: Mapsui.Extensions.Cache.SqlitePersistentCache.Remove*
  implements:
  - BruTile.Cache.ITileCache{System.Byte[]}.Remove(BruTile.TileIndex)
- uid: Mapsui.Extensions.Cache.SqlitePersistentCache.Find(BruTile.TileIndex)
  commentId: M:Mapsui.Extensions.Cache.SqlitePersistentCache.Find(BruTile.TileIndex)
  id: Find(BruTile.TileIndex)
  parent: Mapsui.Extensions.Cache.SqlitePersistentCache
  langs:
  - csharp
  - vb
  name: Find(TileIndex)
  nameWithType: SqlitePersistentCache.Find(TileIndex)
  fullName: Mapsui.Extensions.Cache.SqlitePersistentCache.Find(BruTile.TileIndex)
  type: Method
  source:
    remote:
      path: Mapsui.Extensions/Cache/SqlitePersistentCache.cs
      branch: main
      repo: git@github.com:Mapsui/Mapsui.git
    id: Find
    path: ../../Mapsui.Extensions/Cache/SqlitePersistentCache.cs
    startLine: 161
  assemblies:
  - Mapsui.Extensions
  namespace: Mapsui.Extensions.Cache
  example: []
  syntax:
    content: public byte[]? Find(TileIndex index)
    parameters:
    - id: index
      type: BruTile.TileIndex
    return:
      type: System.Byte[]
    content.vb: Public Function Find(index As TileIndex) As Byte()
  overload: Mapsui.Extensions.Cache.SqlitePersistentCache.Find*
  implements:
  - BruTile.Cache.ITileCache{System.Byte[]}.Find(BruTile.TileIndex)
- uid: Mapsui.Extensions.Cache.SqlitePersistentCache.Add(System.String,System.Byte[],System.Byte[])
  commentId: M:Mapsui.Extensions.Cache.SqlitePersistentCache.Add(System.String,System.Byte[],System.Byte[])
  id: Add(System.String,System.Byte[],System.Byte[])
  parent: Mapsui.Extensions.Cache.SqlitePersistentCache
  langs:
  - csharp
  - vb
  name: Add(string, byte[]?, byte[])
  nameWithType: SqlitePersistentCache.Add(string, byte[]?, byte[])
  fullName: Mapsui.Extensions.Cache.SqlitePersistentCache.Add(string, byte[]?, byte[])
  type: Method
  source:
    remote:
      path: Mapsui.Extensions/Cache/SqlitePersistentCache.cs
      branch: main
      repo: git@github.com:Mapsui/Mapsui.git
    id: Add
    path: ../../Mapsui.Extensions/Cache/SqlitePersistentCache.cs
    startLine: 181
  assemblies:
  - Mapsui.Extensions
  namespace: Mapsui.Extensions.Cache
  example: []
  syntax:
    content: public void Add(string url, byte[]? postData, byte[] tile)
    parameters:
    - id: url
      type: System.String
    - id: postData
      type: System.Byte[]
    - id: tile
      type: System.Byte[]
    content.vb: Public Sub Add(url As String, postData As Byte(), tile As Byte())
  overload: Mapsui.Extensions.Cache.SqlitePersistentCache.Add*
  implements:
  - Mapsui.Cache.IUrlPersistentCache.Add(System.String,System.Byte[],System.Byte[])
  nameWithType.vb: SqlitePersistentCache.Add(String, Byte(), Byte())
  fullName.vb: Mapsui.Extensions.Cache.SqlitePersistentCache.Add(String, Byte(), Byte())
  name.vb: Add(String, Byte(), Byte())
- uid: Mapsui.Extensions.Cache.SqlitePersistentCache.Remove(System.String,System.Byte[])
  commentId: M:Mapsui.Extensions.Cache.SqlitePersistentCache.Remove(System.String,System.Byte[])
  id: Remove(System.String,System.Byte[])
  parent: Mapsui.Extensions.Cache.SqlitePersistentCache
  langs:
  - csharp
  - vb
  name: Remove(string, byte[]?)
  nameWithType: SqlitePersistentCache.Remove(string, byte[]?)
  fullName: Mapsui.Extensions.Cache.SqlitePersistentCache.Remove(string, byte[]?)
  type: Method
  source:
    remote:
      path: Mapsui.Extensions/Cache/SqlitePersistentCache.cs
      branch: main
      repo: git@github.com:Mapsui/Mapsui.git
    id: Remove
    path: ../../Mapsui.Extensions/Cache/SqlitePersistentCache.cs
    startLine: 197
  assemblies:
  - Mapsui.Extensions
  namespace: Mapsui.Extensions.Cache
  example: []
  syntax:
    content: public void Remove(string url, byte[]? postData)
    parameters:
    - id: url
      type: System.String
    - id: postData
      type: System.Byte[]
    content.vb: Public Sub Remove(url As String, postData As Byte())
  overload: Mapsui.Extensions.Cache.SqlitePersistentCache.Remove*
  implements:
  - Mapsui.Cache.IUrlPersistentCache.Remove(System.String,System.Byte[])
  nameWithType.vb: SqlitePersistentCache.Remove(String, Byte())
  fullName.vb: Mapsui.Extensions.Cache.SqlitePersistentCache.Remove(String, Byte())
  name.vb: Remove(String, Byte())
- uid: Mapsui.Extensions.Cache.SqlitePersistentCache.Find(System.String,System.Byte[])
  commentId: M:Mapsui.Extensions.Cache.SqlitePersistentCache.Find(System.String,System.Byte[])
  id: Find(System.String,System.Byte[])
  parent: Mapsui.Extensions.Cache.SqlitePersistentCache
  langs:
  - csharp
  - vb
  name: Find(string, byte[]?)
  nameWithType: SqlitePersistentCache.Find(string, byte[]?)
  fullName: Mapsui.Extensions.Cache.SqlitePersistentCache.Find(string, byte[]?)
  type: Method
  source:
    remote:
      path: Mapsui.Extensions/Cache/SqlitePersistentCache.cs
      branch: main
      repo: git@github.com:Mapsui/Mapsui.git
    id: Find
    path: ../../Mapsui.Extensions/Cache/SqlitePersistentCache.cs
    startLine: 203
  assemblies:
  - Mapsui.Extensions
  namespace: Mapsui.Extensions.Cache
  example: []
  syntax:
    content: public byte[]? Find(string url, byte[]? postData)
    parameters:
    - id: url
      type: System.String
    - id: postData
      type: System.Byte[]
    return:
      type: System.Byte[]
    content.vb: Public Function Find(url As String, postData As Byte()) As Byte()
  overload: Mapsui.Extensions.Cache.SqlitePersistentCache.Find*
  implements:
  - Mapsui.Cache.IUrlPersistentCache.Find(System.String,System.Byte[])
  nameWithType.vb: SqlitePersistentCache.Find(String, Byte())
  fullName.vb: Mapsui.Extensions.Cache.SqlitePersistentCache.Find(String, Byte())
  name.vb: Find(String, Byte())
- uid: Mapsui.Extensions.Cache.SqlitePersistentCache.Clear
  commentId: M:Mapsui.Extensions.Cache.SqlitePersistentCache.Clear
  id: Clear
  parent: Mapsui.Extensions.Cache.SqlitePersistentCache
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: SqlitePersistentCache.Clear()
  fullName: Mapsui.Extensions.Cache.SqlitePersistentCache.Clear()
  type: Method
  source:
    remote:
      path: Mapsui.Extensions/Cache/SqlitePersistentCache.cs
      branch: main
      repo: git@github.com:Mapsui/Mapsui.git
    id: Clear
    path: ../../Mapsui.Extensions/Cache/SqlitePersistentCache.cs
    startLine: 304
  assemblies:
  - Mapsui.Extensions
  namespace: Mapsui.Extensions.Cache
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: Mapsui.Extensions.Cache.SqlitePersistentCache.Clear*
references:
- uid: Mapsui.Extensions.Cache
  commentId: N:Mapsui.Extensions.Cache
  href: Mapsui.html
  name: Mapsui.Extensions.Cache
  nameWithType: Mapsui.Extensions.Cache
  fullName: Mapsui.Extensions.Cache
  spec.csharp:
  - uid: Mapsui
    name: Mapsui
    href: Mapsui.html
  - name: .
  - uid: Mapsui.Extensions
    name: Extensions
    href: Mapsui.Extensions.html
  - name: .
  - uid: Mapsui.Extensions.Cache
    name: Cache
    href: Mapsui.Extensions.Cache.html
  spec.vb:
  - uid: Mapsui
    name: Mapsui
    href: Mapsui.html
  - name: .
  - uid: Mapsui.Extensions
    name: Extensions
    href: Mapsui.Extensions.html
  - name: .
  - uid: Mapsui.Extensions.Cache
    name: Cache
    href: Mapsui.Extensions.Cache.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: BruTile.Cache.IPersistentCache{System.Byte[]}
  commentId: T:BruTile.Cache.IPersistentCache{System.Byte[]}
  parent: BruTile.Cache
  definition: BruTile.Cache.IPersistentCache`1
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: IPersistentCache<byte[]>
  nameWithType: IPersistentCache<byte[]>
  fullName: BruTile.Cache.IPersistentCache<byte[]>
  nameWithType.vb: IPersistentCache(Of Byte())
  fullName.vb: BruTile.Cache.IPersistentCache(Of Byte())
  name.vb: IPersistentCache(Of Byte())
  spec.csharp:
  - uid: BruTile.Cache.IPersistentCache`1
    name: IPersistentCache
    isExternal: true
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: BruTile.Cache.IPersistentCache`1
    name: IPersistentCache
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: )
- uid: BruTile.Cache.ITileCache{System.Byte[]}
  commentId: T:BruTile.Cache.ITileCache{System.Byte[]}
  parent: BruTile.Cache
  definition: BruTile.Cache.ITileCache`1
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: ITileCache<byte[]>
  nameWithType: ITileCache<byte[]>
  fullName: BruTile.Cache.ITileCache<byte[]>
  nameWithType.vb: ITileCache(Of Byte())
  fullName.vb: BruTile.Cache.ITileCache(Of Byte())
  name.vb: ITileCache(Of Byte())
  spec.csharp:
  - uid: BruTile.Cache.ITileCache`1
    name: ITileCache
    isExternal: true
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: BruTile.Cache.ITileCache`1
    name: ITileCache
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: )
- uid: Mapsui.Cache.IUrlPersistentCache
  commentId: T:Mapsui.Cache.IUrlPersistentCache
  parent: Mapsui.Cache
  href: Mapsui.Cache.IUrlPersistentCache.html
  name: IUrlPersistentCache
  nameWithType: IUrlPersistentCache
  fullName: Mapsui.Cache.IUrlPersistentCache
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Mapsui.Extensions.DisposableExtension.DisposeIfDisposable
  commentId: M:Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(System.Object)
  parent: Mapsui.Extensions.DisposableExtension
  definition: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(System.Object)
  href: Mapsui.Extensions.DisposableExtension.html#Mapsui_Extensions_DisposableExtension_DisposeIfDisposable_System_Object_
  name: DisposeIfDisposable(object)
  nameWithType: DisposableExtension.DisposeIfDisposable(object)
  fullName: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(object)
  nameWithType.vb: DisposableExtension.DisposeIfDisposable(Object)
  fullName.vb: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(Object)
  name.vb: DisposeIfDisposable(Object)
  spec.csharp:
  - uid: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(System.Object)
    name: DisposeIfDisposable
    href: Mapsui.Extensions.DisposableExtension.html#Mapsui_Extensions_DisposableExtension_DisposeIfDisposable_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(System.Object)
    name: DisposeIfDisposable
    href: Mapsui.Extensions.DisposableExtension.html#Mapsui_Extensions_DisposableExtension_DisposeIfDisposable_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: BruTile.Cache.IPersistentCache`1
  commentId: T:BruTile.Cache.IPersistentCache`1
  isExternal: true
  name: IPersistentCache<T>
  nameWithType: IPersistentCache<T>
  fullName: BruTile.Cache.IPersistentCache<T>
  nameWithType.vb: IPersistentCache(Of T)
  fullName.vb: BruTile.Cache.IPersistentCache(Of T)
  name.vb: IPersistentCache(Of T)
  spec.csharp:
  - uid: BruTile.Cache.IPersistentCache`1
    name: IPersistentCache
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: BruTile.Cache.IPersistentCache`1
    name: IPersistentCache
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: BruTile.Cache
  commentId: N:BruTile.Cache
  isExternal: true
  name: BruTile.Cache
  nameWithType: BruTile.Cache
  fullName: BruTile.Cache
  spec.csharp:
  - uid: BruTile
    name: BruTile
    isExternal: true
  - name: .
  - uid: BruTile.Cache
    name: Cache
    isExternal: true
  spec.vb:
  - uid: BruTile
    name: BruTile
    isExternal: true
  - name: .
  - uid: BruTile.Cache
    name: Cache
    isExternal: true
- uid: BruTile.Cache.ITileCache`1
  commentId: T:BruTile.Cache.ITileCache`1
  isExternal: true
  name: ITileCache<T>
  nameWithType: ITileCache<T>
  fullName: BruTile.Cache.ITileCache<T>
  nameWithType.vb: ITileCache(Of T)
  fullName.vb: BruTile.Cache.ITileCache(Of T)
  name.vb: ITileCache(Of T)
  spec.csharp:
  - uid: BruTile.Cache.ITileCache`1
    name: ITileCache
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: BruTile.Cache.ITileCache`1
    name: ITileCache
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Mapsui.Cache
  commentId: N:Mapsui.Cache
  href: Mapsui.html
  name: Mapsui.Cache
  nameWithType: Mapsui.Cache
  fullName: Mapsui.Cache
  spec.csharp:
  - uid: Mapsui
    name: Mapsui
    href: Mapsui.html
  - name: .
  - uid: Mapsui.Cache
    name: Cache
    href: Mapsui.Cache.html
  spec.vb:
  - uid: Mapsui
    name: Mapsui
    href: Mapsui.html
  - name: .
  - uid: Mapsui.Cache
    name: Cache
    href: Mapsui.Cache.html
- uid: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(System.Object)
  commentId: M:Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(System.Object)
  isExternal: true
  href: Mapsui.Extensions.DisposableExtension.html#Mapsui_Extensions_DisposableExtension_DisposeIfDisposable_System_Object_
  name: DisposeIfDisposable(object)
  nameWithType: DisposableExtension.DisposeIfDisposable(object)
  fullName: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(object)
  nameWithType.vb: DisposableExtension.DisposeIfDisposable(Object)
  fullName.vb: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(Object)
  name.vb: DisposeIfDisposable(Object)
  spec.csharp:
  - uid: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(System.Object)
    name: DisposeIfDisposable
    href: Mapsui.Extensions.DisposableExtension.html#Mapsui_Extensions_DisposableExtension_DisposeIfDisposable_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(System.Object)
    name: DisposeIfDisposable
    href: Mapsui.Extensions.DisposableExtension.html#Mapsui_Extensions_DisposableExtension_DisposeIfDisposable_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Mapsui.Extensions.DisposableExtension
  commentId: T:Mapsui.Extensions.DisposableExtension
  parent: Mapsui.Extensions
  href: Mapsui.Extensions.DisposableExtension.html
  name: DisposableExtension
  nameWithType: DisposableExtension
  fullName: Mapsui.Extensions.DisposableExtension
- uid: Mapsui.Extensions
  commentId: N:Mapsui.Extensions
  href: Mapsui.html
  name: Mapsui.Extensions
  nameWithType: Mapsui.Extensions
  fullName: Mapsui.Extensions
  spec.csharp:
  - uid: Mapsui
    name: Mapsui
    href: Mapsui.html
  - name: .
  - uid: Mapsui.Extensions
    name: Extensions
    href: Mapsui.Extensions.html
  spec.vb:
  - uid: Mapsui
    name: Mapsui
    href: Mapsui.html
  - name: .
  - uid: Mapsui.Extensions
    name: Extensions
    href: Mapsui.Extensions.html
- uid: Mapsui.Extensions.Cache.SqlitePersistentCache.#ctor*
  commentId: Overload:Mapsui.Extensions.Cache.SqlitePersistentCache.#ctor
  href: Mapsui.Extensions.Cache.SqlitePersistentCache.html#Mapsui_Extensions_Cache_SqlitePersistentCache__ctor_System_String_System_Nullable_System_TimeSpan__System_String_System_Boolean_
  name: SqlitePersistentCache
  nameWithType: SqlitePersistentCache.SqlitePersistentCache
  fullName: Mapsui.Extensions.Cache.SqlitePersistentCache.SqlitePersistentCache
  nameWithType.vb: SqlitePersistentCache.New
  fullName.vb: Mapsui.Extensions.Cache.SqlitePersistentCache.New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan?
  nameWithType: TimeSpan?
  fullName: System.TimeSpan?
  spec.csharp:
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '?'
  spec.vb:
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '?'
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Mapsui.Extensions.Cache.SqlitePersistentCache.Add*
  commentId: Overload:Mapsui.Extensions.Cache.SqlitePersistentCache.Add
  href: Mapsui.Extensions.Cache.SqlitePersistentCache.html#Mapsui_Extensions_Cache_SqlitePersistentCache_Add_BruTile_TileIndex_System_Byte___
  name: Add
  nameWithType: SqlitePersistentCache.Add
  fullName: Mapsui.Extensions.Cache.SqlitePersistentCache.Add
- uid: BruTile.Cache.ITileCache{System.Byte[]}.Add(BruTile.TileIndex,System.Byte[])
  commentId: M:BruTile.Cache.ITileCache{System.Byte[]}.Add(BruTile.TileIndex,System.Byte[])
  parent: BruTile.Cache.ITileCache{System.Byte[]}
  definition: BruTile.Cache.ITileCache`1.Add(BruTile.TileIndex,`0)
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: Add(TileIndex, byte[])
  nameWithType: ITileCache<byte[]>.Add(TileIndex, byte[])
  fullName: BruTile.Cache.ITileCache<byte[]>.Add(BruTile.TileIndex, byte[])
  nameWithType.vb: ITileCache(Of Byte()).Add(TileIndex, Byte())
  fullName.vb: BruTile.Cache.ITileCache(Of Byte()).Add(BruTile.TileIndex, Byte())
  name.vb: Add(TileIndex, Byte())
  spec.csharp:
  - uid: BruTile.Cache.ITileCache{System.Byte[]}.Add(BruTile.TileIndex,System.Byte[])
    name: Add
    isExternal: true
  - name: (
  - uid: BruTile.TileIndex
    name: TileIndex
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: BruTile.Cache.ITileCache{System.Byte[]}.Add(BruTile.TileIndex,System.Byte[])
    name: Add
    isExternal: true
  - name: (
  - uid: BruTile.TileIndex
    name: TileIndex
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: )
- uid: BruTile.TileIndex
  commentId: T:BruTile.TileIndex
  parent: BruTile
  isExternal: true
  name: TileIndex
  nameWithType: TileIndex
  fullName: BruTile.TileIndex
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: BruTile.Cache.ITileCache`1.Add(BruTile.TileIndex,`0)
  commentId: M:BruTile.Cache.ITileCache`1.Add(BruTile.TileIndex,`0)
  isExternal: true
  name: Add(TileIndex, T)
  nameWithType: ITileCache<T>.Add(TileIndex, T)
  fullName: BruTile.Cache.ITileCache<T>.Add(BruTile.TileIndex, T)
  nameWithType.vb: ITileCache(Of T).Add(TileIndex, T)
  fullName.vb: BruTile.Cache.ITileCache(Of T).Add(BruTile.TileIndex, T)
  spec.csharp:
  - uid: BruTile.Cache.ITileCache`1.Add(BruTile.TileIndex,`0)
    name: Add
    isExternal: true
  - name: (
  - uid: BruTile.TileIndex
    name: TileIndex
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: BruTile.Cache.ITileCache`1.Add(BruTile.TileIndex,`0)
    name: Add
    isExternal: true
  - name: (
  - uid: BruTile.TileIndex
    name: TileIndex
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: BruTile
  commentId: N:BruTile
  isExternal: true
  name: BruTile
  nameWithType: BruTile
  fullName: BruTile
- uid: Mapsui.Extensions.Cache.SqlitePersistentCache.Remove*
  commentId: Overload:Mapsui.Extensions.Cache.SqlitePersistentCache.Remove
  href: Mapsui.Extensions.Cache.SqlitePersistentCache.html#Mapsui_Extensions_Cache_SqlitePersistentCache_Remove_BruTile_TileIndex_
  name: Remove
  nameWithType: SqlitePersistentCache.Remove
  fullName: Mapsui.Extensions.Cache.SqlitePersistentCache.Remove
- uid: BruTile.Cache.ITileCache{System.Byte[]}.Remove(BruTile.TileIndex)
  commentId: M:BruTile.Cache.ITileCache{System.Byte[]}.Remove(BruTile.TileIndex)
  parent: BruTile.Cache.ITileCache{System.Byte[]}
  definition: BruTile.Cache.ITileCache`1.Remove(BruTile.TileIndex)
  name: Remove(TileIndex)
  nameWithType: ITileCache<byte[]>.Remove(TileIndex)
  fullName: BruTile.Cache.ITileCache<byte[]>.Remove(BruTile.TileIndex)
  nameWithType.vb: ITileCache(Of Byte()).Remove(TileIndex)
  fullName.vb: BruTile.Cache.ITileCache(Of Byte()).Remove(BruTile.TileIndex)
  spec.csharp:
  - uid: BruTile.Cache.ITileCache{System.Byte[]}.Remove(BruTile.TileIndex)
    name: Remove
    isExternal: true
  - name: (
  - uid: BruTile.TileIndex
    name: TileIndex
    isExternal: true
  - name: )
  spec.vb:
  - uid: BruTile.Cache.ITileCache{System.Byte[]}.Remove(BruTile.TileIndex)
    name: Remove
    isExternal: true
  - name: (
  - uid: BruTile.TileIndex
    name: TileIndex
    isExternal: true
  - name: )
- uid: BruTile.Cache.ITileCache`1.Remove(BruTile.TileIndex)
  commentId: M:BruTile.Cache.ITileCache`1.Remove(BruTile.TileIndex)
  isExternal: true
  name: Remove(TileIndex)
  nameWithType: ITileCache<T>.Remove(TileIndex)
  fullName: BruTile.Cache.ITileCache<T>.Remove(BruTile.TileIndex)
  nameWithType.vb: ITileCache(Of T).Remove(TileIndex)
  fullName.vb: BruTile.Cache.ITileCache(Of T).Remove(BruTile.TileIndex)
  spec.csharp:
  - uid: BruTile.Cache.ITileCache`1.Remove(BruTile.TileIndex)
    name: Remove
    isExternal: true
  - name: (
  - uid: BruTile.TileIndex
    name: TileIndex
    isExternal: true
  - name: )
  spec.vb:
  - uid: BruTile.Cache.ITileCache`1.Remove(BruTile.TileIndex)
    name: Remove
    isExternal: true
  - name: (
  - uid: BruTile.TileIndex
    name: TileIndex
    isExternal: true
  - name: )
- uid: Mapsui.Extensions.Cache.SqlitePersistentCache.Find*
  commentId: Overload:Mapsui.Extensions.Cache.SqlitePersistentCache.Find
  href: Mapsui.Extensions.Cache.SqlitePersistentCache.html#Mapsui_Extensions_Cache_SqlitePersistentCache_Find_BruTile_TileIndex_
  name: Find
  nameWithType: SqlitePersistentCache.Find
  fullName: Mapsui.Extensions.Cache.SqlitePersistentCache.Find
- uid: BruTile.Cache.ITileCache{System.Byte[]}.Find(BruTile.TileIndex)
  commentId: M:BruTile.Cache.ITileCache{System.Byte[]}.Find(BruTile.TileIndex)
  parent: BruTile.Cache.ITileCache{System.Byte[]}
  definition: BruTile.Cache.ITileCache`1.Find(BruTile.TileIndex)
  name: Find(TileIndex)
  nameWithType: ITileCache<byte[]>.Find(TileIndex)
  fullName: BruTile.Cache.ITileCache<byte[]>.Find(BruTile.TileIndex)
  nameWithType.vb: ITileCache(Of Byte()).Find(TileIndex)
  fullName.vb: BruTile.Cache.ITileCache(Of Byte()).Find(BruTile.TileIndex)
  spec.csharp:
  - uid: BruTile.Cache.ITileCache{System.Byte[]}.Find(BruTile.TileIndex)
    name: Find
    isExternal: true
  - name: (
  - uid: BruTile.TileIndex
    name: TileIndex
    isExternal: true
  - name: )
  spec.vb:
  - uid: BruTile.Cache.ITileCache{System.Byte[]}.Find(BruTile.TileIndex)
    name: Find
    isExternal: true
  - name: (
  - uid: BruTile.TileIndex
    name: TileIndex
    isExternal: true
  - name: )
- uid: BruTile.Cache.ITileCache`1.Find(BruTile.TileIndex)
  commentId: M:BruTile.Cache.ITileCache`1.Find(BruTile.TileIndex)
  isExternal: true
  name: Find(TileIndex)
  nameWithType: ITileCache<T>.Find(TileIndex)
  fullName: BruTile.Cache.ITileCache<T>.Find(BruTile.TileIndex)
  nameWithType.vb: ITileCache(Of T).Find(TileIndex)
  fullName.vb: BruTile.Cache.ITileCache(Of T).Find(BruTile.TileIndex)
  spec.csharp:
  - uid: BruTile.Cache.ITileCache`1.Find(BruTile.TileIndex)
    name: Find
    isExternal: true
  - name: (
  - uid: BruTile.TileIndex
    name: TileIndex
    isExternal: true
  - name: )
  spec.vb:
  - uid: BruTile.Cache.ITileCache`1.Find(BruTile.TileIndex)
    name: Find
    isExternal: true
  - name: (
  - uid: BruTile.TileIndex
    name: TileIndex
    isExternal: true
  - name: )
- uid: Mapsui.Cache.IUrlPersistentCache.Add(System.String,System.Byte[],System.Byte[])
  commentId: M:Mapsui.Cache.IUrlPersistentCache.Add(System.String,System.Byte[],System.Byte[])
  parent: Mapsui.Cache.IUrlPersistentCache
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: Add(string, byte[], byte[])
  nameWithType: IUrlPersistentCache.Add(string, byte[], byte[])
  fullName: Mapsui.Cache.IUrlPersistentCache.Add(string, byte[], byte[])
  nameWithType.vb: IUrlPersistentCache.Add(String, Byte(), Byte())
  fullName.vb: Mapsui.Cache.IUrlPersistentCache.Add(String, Byte(), Byte())
  name.vb: Add(String, Byte(), Byte())
  spec.csharp:
  - uid: Mapsui.Cache.IUrlPersistentCache.Add(System.String,System.Byte[],System.Byte[])
    name: Add
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mapsui.Cache.IUrlPersistentCache.Add(System.String,System.Byte[],System.Byte[])
    name: Add
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: )
- uid: Mapsui.Cache.IUrlPersistentCache.Remove(System.String,System.Byte[])
  commentId: M:Mapsui.Cache.IUrlPersistentCache.Remove(System.String,System.Byte[])
  parent: Mapsui.Cache.IUrlPersistentCache
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: Remove(string, byte[])
  nameWithType: IUrlPersistentCache.Remove(string, byte[])
  fullName: Mapsui.Cache.IUrlPersistentCache.Remove(string, byte[])
  nameWithType.vb: IUrlPersistentCache.Remove(String, Byte())
  fullName.vb: Mapsui.Cache.IUrlPersistentCache.Remove(String, Byte())
  name.vb: Remove(String, Byte())
  spec.csharp:
  - uid: Mapsui.Cache.IUrlPersistentCache.Remove(System.String,System.Byte[])
    name: Remove
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mapsui.Cache.IUrlPersistentCache.Remove(System.String,System.Byte[])
    name: Remove
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: )
- uid: Mapsui.Cache.IUrlPersistentCache.Find(System.String,System.Byte[])
  commentId: M:Mapsui.Cache.IUrlPersistentCache.Find(System.String,System.Byte[])
  parent: Mapsui.Cache.IUrlPersistentCache
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: Find(string, byte[])
  nameWithType: IUrlPersistentCache.Find(string, byte[])
  fullName: Mapsui.Cache.IUrlPersistentCache.Find(string, byte[])
  nameWithType.vb: IUrlPersistentCache.Find(String, Byte())
  fullName.vb: Mapsui.Cache.IUrlPersistentCache.Find(String, Byte())
  name.vb: Find(String, Byte())
  spec.csharp:
  - uid: Mapsui.Cache.IUrlPersistentCache.Find(System.String,System.Byte[])
    name: Find
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mapsui.Cache.IUrlPersistentCache.Find(System.String,System.Byte[])
    name: Find
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: )
- uid: Mapsui.Extensions.Cache.SqlitePersistentCache.Clear*
  commentId: Overload:Mapsui.Extensions.Cache.SqlitePersistentCache.Clear
  href: Mapsui.Extensions.Cache.SqlitePersistentCache.html#Mapsui_Extensions_Cache_SqlitePersistentCache_Clear
  name: Clear
  nameWithType: SqlitePersistentCache.Clear
  fullName: Mapsui.Extensions.Cache.SqlitePersistentCache.Clear
