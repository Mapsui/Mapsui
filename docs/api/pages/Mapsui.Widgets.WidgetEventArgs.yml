### YamlMime:ManagedReference
items:
- uid: Mapsui.Widgets.WidgetEventArgs
  commentId: T:Mapsui.Widgets.WidgetEventArgs
  id: WidgetEventArgs
  parent: Mapsui.Widgets
  children:
  - Mapsui.Widgets.WidgetEventArgs.#ctor(Mapsui.Manipulations.ScreenPosition,Mapsui.Manipulations.TapType,System.Boolean,System.Boolean,System.Func{Mapsui.MapInfo})
  - Mapsui.Widgets.WidgetEventArgs.GetMapInfo
  - Mapsui.Widgets.WidgetEventArgs.LeftButton
  - Mapsui.Widgets.WidgetEventArgs.Position
  - Mapsui.Widgets.WidgetEventArgs.ShiftPressed
  - Mapsui.Widgets.WidgetEventArgs.TapType
  langs:
  - csharp
  - vb
  name: WidgetEventArgs
  nameWithType: WidgetEventArgs
  fullName: Mapsui.Widgets.WidgetEventArgs
  type: Class
  source:
    remote:
      path: Mapsui/Widgets/WidgetEventArgs.cs
      branch: main
      repo: git@github.com:Mapsui/Mapsui.git
    id: WidgetEventArgs
    path: ../../Mapsui/Widgets/WidgetEventArgs.cs
    startLine: 8
  assemblies:
  - Mapsui
  namespace: Mapsui.Widgets
  summary: Arguments for a touched event of a widget
  example: []
  syntax:
    content: 'public class WidgetEventArgs : EventArgs'
    content.vb: Public Class WidgetEventArgs Inherits EventArgs
  inheritance:
  - System.Object
  - System.EventArgs
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Mapsui.Extensions.DisposableExtension.DisposeIfDisposable
- uid: Mapsui.Widgets.WidgetEventArgs.#ctor(Mapsui.Manipulations.ScreenPosition,Mapsui.Manipulations.TapType,System.Boolean,System.Boolean,System.Func{Mapsui.MapInfo})
  commentId: M:Mapsui.Widgets.WidgetEventArgs.#ctor(Mapsui.Manipulations.ScreenPosition,Mapsui.Manipulations.TapType,System.Boolean,System.Boolean,System.Func{Mapsui.MapInfo})
  id: '#ctor(Mapsui.Manipulations.ScreenPosition,Mapsui.Manipulations.TapType,System.Boolean,System.Boolean,System.Func{Mapsui.MapInfo})'
  parent: Mapsui.Widgets.WidgetEventArgs
  langs:
  - csharp
  - vb
  name: WidgetEventArgs(ScreenPosition, TapType, bool, bool, Func<MapInfo>)
  nameWithType: WidgetEventArgs.WidgetEventArgs(ScreenPosition, TapType, bool, bool, Func<MapInfo>)
  fullName: Mapsui.Widgets.WidgetEventArgs.WidgetEventArgs(Mapsui.Manipulations.ScreenPosition, Mapsui.Manipulations.TapType, bool, bool, System.Func<Mapsui.MapInfo>)
  type: Constructor
  source:
    remote:
      path: Mapsui/Widgets/WidgetEventArgs.cs
      branch: main
      repo: git@github.com:Mapsui/Mapsui.git
    id: .ctor
    path: ../../Mapsui/Widgets/WidgetEventArgs.cs
    startLine: 8
  assemblies:
  - Mapsui
  namespace: Mapsui.Widgets
  summary: Arguments for a touched event of a widget
  example: []
  syntax:
    content: public WidgetEventArgs(ScreenPosition position, TapType tapType, bool leftButton, bool shiftPressed, Func<MapInfo> getMapInfo)
    parameters:
    - id: position
      type: Mapsui.Manipulations.ScreenPosition
    - id: tapType
      type: Mapsui.Manipulations.TapType
    - id: leftButton
      type: System.Boolean
    - id: shiftPressed
      type: System.Boolean
    - id: getMapInfo
      type: System.Func{Mapsui.MapInfo}
    content.vb: Public Sub New(position As ScreenPosition, tapType As TapType, leftButton As Boolean, shiftPressed As Boolean, getMapInfo As Func(Of MapInfo))
  overload: Mapsui.Widgets.WidgetEventArgs.#ctor*
  nameWithType.vb: WidgetEventArgs.New(ScreenPosition, TapType, Boolean, Boolean, Func(Of MapInfo))
  fullName.vb: Mapsui.Widgets.WidgetEventArgs.New(Mapsui.Manipulations.ScreenPosition, Mapsui.Manipulations.TapType, Boolean, Boolean, System.Func(Of Mapsui.MapInfo))
  name.vb: New(ScreenPosition, TapType, Boolean, Boolean, Func(Of MapInfo))
- uid: Mapsui.Widgets.WidgetEventArgs.Position
  commentId: P:Mapsui.Widgets.WidgetEventArgs.Position
  id: Position
  parent: Mapsui.Widgets.WidgetEventArgs
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: WidgetEventArgs.Position
  fullName: Mapsui.Widgets.WidgetEventArgs.Position
  type: Property
  source:
    remote:
      path: Mapsui/Widgets/WidgetEventArgs.cs
      branch: main
      repo: git@github.com:Mapsui/Mapsui.git
    id: Position
    path: ../../Mapsui/Widgets/WidgetEventArgs.cs
    startLine: 13
  assemblies:
  - Mapsui
  namespace: Mapsui.Widgets
  summary: Screen Position of touch in device independent units (or DIP or DP)
  example: []
  syntax:
    content: public ScreenPosition Position { get; }
    parameters: []
    return:
      type: Mapsui.Manipulations.ScreenPosition
    content.vb: Public ReadOnly Property Position As ScreenPosition
  overload: Mapsui.Widgets.WidgetEventArgs.Position*
- uid: Mapsui.Widgets.WidgetEventArgs.TapType
  commentId: P:Mapsui.Widgets.WidgetEventArgs.TapType
  id: TapType
  parent: Mapsui.Widgets.WidgetEventArgs
  langs:
  - csharp
  - vb
  name: TapType
  nameWithType: WidgetEventArgs.TapType
  fullName: Mapsui.Widgets.WidgetEventArgs.TapType
  type: Property
  source:
    remote:
      path: Mapsui/Widgets/WidgetEventArgs.cs
      branch: main
      repo: git@github.com:Mapsui/Mapsui.git
    id: TapType
    path: ../../Mapsui/Widgets/WidgetEventArgs.cs
    startLine: 18
  assemblies:
  - Mapsui
  namespace: Mapsui.Widgets
  summary: Number of clicks on the Widget
  example: []
  syntax:
    content: public TapType TapType { get; }
    parameters: []
    return:
      type: Mapsui.Manipulations.TapType
    content.vb: Public ReadOnly Property TapType As TapType
  overload: Mapsui.Widgets.WidgetEventArgs.TapType*
- uid: Mapsui.Widgets.WidgetEventArgs.LeftButton
  commentId: P:Mapsui.Widgets.WidgetEventArgs.LeftButton
  id: LeftButton
  parent: Mapsui.Widgets.WidgetEventArgs
  langs:
  - csharp
  - vb
  name: LeftButton
  nameWithType: WidgetEventArgs.LeftButton
  fullName: Mapsui.Widgets.WidgetEventArgs.LeftButton
  type: Property
  source:
    remote:
      path: Mapsui/Widgets/WidgetEventArgs.cs
      branch: main
      repo: git@github.com:Mapsui/Mapsui.git
    id: LeftButton
    path: ../../Mapsui/Widgets/WidgetEventArgs.cs
    startLine: 23
  assemblies:
  - Mapsui
  namespace: Mapsui.Widgets
  summary: Left button used while touching
  example: []
  syntax:
    content: public bool LeftButton { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property LeftButton As Boolean
  overload: Mapsui.Widgets.WidgetEventArgs.LeftButton*
- uid: Mapsui.Widgets.WidgetEventArgs.ShiftPressed
  commentId: P:Mapsui.Widgets.WidgetEventArgs.ShiftPressed
  id: ShiftPressed
  parent: Mapsui.Widgets.WidgetEventArgs
  langs:
  - csharp
  - vb
  name: ShiftPressed
  nameWithType: WidgetEventArgs.ShiftPressed
  fullName: Mapsui.Widgets.WidgetEventArgs.ShiftPressed
  type: Property
  source:
    remote:
      path: Mapsui/Widgets/WidgetEventArgs.cs
      branch: main
      repo: git@github.com:Mapsui/Mapsui.git
    id: ShiftPressed
    path: ../../Mapsui/Widgets/WidgetEventArgs.cs
    startLine: 28
  assemblies:
  - Mapsui
  namespace: Mapsui.Widgets
  summary: Shift key pressed while touching
  example: []
  syntax:
    content: public bool ShiftPressed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property ShiftPressed As Boolean
  overload: Mapsui.Widgets.WidgetEventArgs.ShiftPressed*
- uid: Mapsui.Widgets.WidgetEventArgs.GetMapInfo
  commentId: P:Mapsui.Widgets.WidgetEventArgs.GetMapInfo
  id: GetMapInfo
  parent: Mapsui.Widgets.WidgetEventArgs
  langs:
  - csharp
  - vb
  name: GetMapInfo
  nameWithType: WidgetEventArgs.GetMapInfo
  fullName: Mapsui.Widgets.WidgetEventArgs.GetMapInfo
  type: Property
  source:
    remote:
      path: Mapsui/Widgets/WidgetEventArgs.cs
      branch: main
      repo: git@github.com:Mapsui/Mapsui.git
    id: GetMapInfo
    path: ../../Mapsui/Widgets/WidgetEventArgs.cs
    startLine: 33
  assemblies:
  - Mapsui
  namespace: Mapsui.Widgets
  summary: Function to get the MapInfo for the WidgetEventArgs.Position.
  example: []
  syntax:
    content: public Func<MapInfo> GetMapInfo { get; }
    parameters: []
    return:
      type: System.Func{Mapsui.MapInfo}
    content.vb: Public ReadOnly Property GetMapInfo As Func(Of MapInfo)
  overload: Mapsui.Widgets.WidgetEventArgs.GetMapInfo*
references:
- uid: Mapsui.Widgets
  commentId: N:Mapsui.Widgets
  href: Mapsui.html
  name: Mapsui.Widgets
  nameWithType: Mapsui.Widgets
  fullName: Mapsui.Widgets
  spec.csharp:
  - uid: Mapsui
    name: Mapsui
    href: Mapsui.html
  - name: .
  - uid: Mapsui.Widgets
    name: Widgets
    href: Mapsui.Widgets.html
  spec.vb:
  - uid: Mapsui
    name: Mapsui
    href: Mapsui.html
  - name: .
  - uid: Mapsui.Widgets
    name: Widgets
    href: Mapsui.Widgets.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.EventArgs
  commentId: T:System.EventArgs
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.eventargs
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.EventArgs.Empty
  commentId: F:System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.eventargs.empty
  name: Empty
  nameWithType: EventArgs.Empty
  fullName: System.EventArgs.Empty
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Mapsui.Extensions.DisposableExtension.DisposeIfDisposable
  commentId: M:Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(System.Object)
  parent: Mapsui.Extensions.DisposableExtension
  definition: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(System.Object)
  href: Mapsui.Extensions.DisposableExtension.html#Mapsui_Extensions_DisposableExtension_DisposeIfDisposable_System_Object_
  name: DisposeIfDisposable(object)
  nameWithType: DisposableExtension.DisposeIfDisposable(object)
  fullName: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(object)
  nameWithType.vb: DisposableExtension.DisposeIfDisposable(Object)
  fullName.vb: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(Object)
  name.vb: DisposeIfDisposable(Object)
  spec.csharp:
  - uid: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(System.Object)
    name: DisposeIfDisposable
    href: Mapsui.Extensions.DisposableExtension.html#Mapsui_Extensions_DisposableExtension_DisposeIfDisposable_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(System.Object)
    name: DisposeIfDisposable
    href: Mapsui.Extensions.DisposableExtension.html#Mapsui_Extensions_DisposableExtension_DisposeIfDisposable_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(System.Object)
  commentId: M:Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(System.Object)
  isExternal: true
  href: Mapsui.Extensions.DisposableExtension.html#Mapsui_Extensions_DisposableExtension_DisposeIfDisposable_System_Object_
  name: DisposeIfDisposable(object)
  nameWithType: DisposableExtension.DisposeIfDisposable(object)
  fullName: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(object)
  nameWithType.vb: DisposableExtension.DisposeIfDisposable(Object)
  fullName.vb: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(Object)
  name.vb: DisposeIfDisposable(Object)
  spec.csharp:
  - uid: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(System.Object)
    name: DisposeIfDisposable
    href: Mapsui.Extensions.DisposableExtension.html#Mapsui_Extensions_DisposableExtension_DisposeIfDisposable_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Mapsui.Extensions.DisposableExtension.DisposeIfDisposable(System.Object)
    name: DisposeIfDisposable
    href: Mapsui.Extensions.DisposableExtension.html#Mapsui_Extensions_DisposableExtension_DisposeIfDisposable_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Mapsui.Extensions.DisposableExtension
  commentId: T:Mapsui.Extensions.DisposableExtension
  parent: Mapsui.Extensions
  href: Mapsui.Extensions.DisposableExtension.html
  name: DisposableExtension
  nameWithType: DisposableExtension
  fullName: Mapsui.Extensions.DisposableExtension
- uid: Mapsui.Extensions
  commentId: N:Mapsui.Extensions
  href: Mapsui.html
  name: Mapsui.Extensions
  nameWithType: Mapsui.Extensions
  fullName: Mapsui.Extensions
  spec.csharp:
  - uid: Mapsui
    name: Mapsui
    href: Mapsui.html
  - name: .
  - uid: Mapsui.Extensions
    name: Extensions
    href: Mapsui.Extensions.html
  spec.vb:
  - uid: Mapsui
    name: Mapsui
    href: Mapsui.html
  - name: .
  - uid: Mapsui.Extensions
    name: Extensions
    href: Mapsui.Extensions.html
- uid: Mapsui.Widgets.WidgetEventArgs.#ctor*
  commentId: Overload:Mapsui.Widgets.WidgetEventArgs.#ctor
  href: Mapsui.Widgets.WidgetEventArgs.html#Mapsui_Widgets_WidgetEventArgs__ctor_Mapsui_Manipulations_ScreenPosition_Mapsui_Manipulations_TapType_System_Boolean_System_Boolean_System_Func_Mapsui_MapInfo__
  name: WidgetEventArgs
  nameWithType: WidgetEventArgs.WidgetEventArgs
  fullName: Mapsui.Widgets.WidgetEventArgs.WidgetEventArgs
  nameWithType.vb: WidgetEventArgs.New
  fullName.vb: Mapsui.Widgets.WidgetEventArgs.New
  name.vb: New
- uid: Mapsui.Manipulations.ScreenPosition
  commentId: T:Mapsui.Manipulations.ScreenPosition
  parent: Mapsui.Manipulations
  href: Mapsui.Manipulations.ScreenPosition.html
  name: ScreenPosition
  nameWithType: ScreenPosition
  fullName: Mapsui.Manipulations.ScreenPosition
- uid: Mapsui.Manipulations.TapType
  commentId: T:Mapsui.Manipulations.TapType
  parent: Mapsui.Manipulations
  href: Mapsui.Manipulations.TapType.html
  name: TapType
  nameWithType: TapType
  fullName: Mapsui.Manipulations.TapType
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Func{Mapsui.MapInfo}
  commentId: T:System.Func{Mapsui.MapInfo}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<MapInfo>
  nameWithType: Func<MapInfo>
  fullName: System.Func<Mapsui.MapInfo>
  nameWithType.vb: Func(Of MapInfo)
  fullName.vb: System.Func(Of Mapsui.MapInfo)
  name.vb: Func(Of MapInfo)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: Mapsui.MapInfo
    name: MapInfo
    href: Mapsui.MapInfo.html
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: Mapsui.MapInfo
    name: MapInfo
    href: Mapsui.MapInfo.html
  - name: )
- uid: Mapsui.Manipulations
  commentId: N:Mapsui.Manipulations
  href: Mapsui.html
  name: Mapsui.Manipulations
  nameWithType: Mapsui.Manipulations
  fullName: Mapsui.Manipulations
  spec.csharp:
  - uid: Mapsui
    name: Mapsui
    href: Mapsui.html
  - name: .
  - uid: Mapsui.Manipulations
    name: Manipulations
    href: Mapsui.Manipulations.html
  spec.vb:
  - uid: Mapsui
    name: Mapsui
    href: Mapsui.html
  - name: .
  - uid: Mapsui.Manipulations
    name: Manipulations
    href: Mapsui.Manipulations.html
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: Mapsui.Widgets.WidgetEventArgs.Position*
  commentId: Overload:Mapsui.Widgets.WidgetEventArgs.Position
  href: Mapsui.Widgets.WidgetEventArgs.html#Mapsui_Widgets_WidgetEventArgs_Position
  name: Position
  nameWithType: WidgetEventArgs.Position
  fullName: Mapsui.Widgets.WidgetEventArgs.Position
- uid: Mapsui.Widgets.WidgetEventArgs.TapType*
  commentId: Overload:Mapsui.Widgets.WidgetEventArgs.TapType
  href: Mapsui.Widgets.WidgetEventArgs.html#Mapsui_Widgets_WidgetEventArgs_TapType
  name: TapType
  nameWithType: WidgetEventArgs.TapType
  fullName: Mapsui.Widgets.WidgetEventArgs.TapType
- uid: Mapsui.Widgets.WidgetEventArgs.LeftButton*
  commentId: Overload:Mapsui.Widgets.WidgetEventArgs.LeftButton
  href: Mapsui.Widgets.WidgetEventArgs.html#Mapsui_Widgets_WidgetEventArgs_LeftButton
  name: LeftButton
  nameWithType: WidgetEventArgs.LeftButton
  fullName: Mapsui.Widgets.WidgetEventArgs.LeftButton
- uid: Mapsui.Widgets.WidgetEventArgs.ShiftPressed*
  commentId: Overload:Mapsui.Widgets.WidgetEventArgs.ShiftPressed
  href: Mapsui.Widgets.WidgetEventArgs.html#Mapsui_Widgets_WidgetEventArgs_ShiftPressed
  name: ShiftPressed
  nameWithType: WidgetEventArgs.ShiftPressed
  fullName: Mapsui.Widgets.WidgetEventArgs.ShiftPressed
- uid: Mapsui.Widgets.WidgetEventArgs.GetMapInfo*
  commentId: Overload:Mapsui.Widgets.WidgetEventArgs.GetMapInfo
  href: Mapsui.Widgets.WidgetEventArgs.html#Mapsui_Widgets_WidgetEventArgs_GetMapInfo
  name: GetMapInfo
  nameWithType: WidgetEventArgs.GetMapInfo
  fullName: Mapsui.Widgets.WidgetEventArgs.GetMapInfo
